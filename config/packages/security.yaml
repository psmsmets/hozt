# config/packages/security.yaml

security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt
            cost: 12


    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: ~ 
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
            user_checker: App\Security\UserChecker

            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /
                # possible values: 'strict', 'lax' and null
                samesite: 'strict'
                # https://symfony.com/doc/current/security/remember_me.html

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html
            logout:
                path: security_logout
                target: /
                #handlers: [app.logout.listener]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # require ROLE_ADMIN for /admin*
         - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
         - { path: ^/wachtwoord-vergeten, role: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
         - { path: ^/beheer, roles: ROLE_ADMIN, requires_channel: https } #should become admin, add super_admin restrictions in backend
         - { path: ^/mijn-account, roles: ROLE_USER, requires_channel: https }
         - { path: ^/api/private, roles: ROLE_USER, requires_channel: https }
         - { path: ^/sportsecretariaat, roles: ROLE_MANAGER, requires_channel: https }
         # catch all force https
         - { path: '^/', roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }

    role_hierarchy:
      ROLE_BOARD:        ROLE_USER
      ROLE_COACH:        ROLE_USER
      ROLE_MANAGER:      ROLE_USER
      ROLE_ADMIN:        ROLE_MANAGER
      ROLE_SUPER_ADMIN:  [ROLE_ADMIN,ROLE_BOARD,ROLE_COACH]
